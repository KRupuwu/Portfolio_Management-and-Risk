# -*- coding: utf-8 -*-
"""Maximum_Drawdown

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1j6-Aoge9vi5aQA6Dfq6E-7oh5quFao6m
"""

from yfinance import Ticker
import yfinance as yf
import matplotlib.pyplot as plt
import numpy as np

def analyze_drawdown(symbol, drawdown_pct=50, investment=100):
    """
    Simple drawdown analyzer
    symbol: stock ticker (e.g. 'AAPL')
    drawdown_pct: minimum drawdown % (e.g. 50)
    investment: investment amount (e.g. 100)
    """

    # Get stock data
    stock = yf.Ticker(symbol)
    data = stock.history(period="2y")

    # Calculate drawdowns
    peak = data['Close'].expanding().max()
    drawdown = (data['Close'] - peak) / peak * 100

    # Find max drawdown point
    worst_day = drawdown.idxmin()
    max_dd = drawdown[worst_day]

    # Check current drawdown
    current_dd = drawdown.iloc[-1]

    print(f"\n{symbol.upper()} ANALYSIS:")
    print(f"Max drawdown: {abs(max_dd):.1f}%")
    print(f"Current drawdown: {abs(current_dd):.1f}%")

    if abs(max_dd) < drawdown_pct:
        print(f"{symbol}: Only {abs(max_dd):.1f}% max drawdown (need {drawdown_pct}%+)")
        return

    # Calculate investment performance
    buy_price = data['Close'][worst_day]
    current_price = data['Close'].iloc[-1]
    shares = investment / buy_price
    current_value = shares * current_price
    return_pct = (current_value - investment) / investment * 100


    print(f"Buy price (at max drawdown): ${buy_price:.2f}")
    print(f"Current: ${current_price:.2f}")
    print(f"${investment} invested at max drawdown → ${current_value:.0f} ({return_pct:+.1f}%)")

    # Add buy triggers
    buy_trigger_25 = max_dd * 0.25
    buy_trigger_50 = max_dd * 0.5

    if abs(current_dd) >= abs(buy_trigger_50):
        print(f"Trigger: Strong buy signal, currently at {abs(current_dd):.1f}% drawdown (>= 50% of max drawdown).")
    elif abs(current_dd) >= abs(buy_trigger_25):
        print(f"Trigger: Consider buying, currently at {abs(current_dd):.1f}% drawdown (>= 25% of max drawdown).")
    else:
        print(f"Trigger: No strong buy signal at {abs(current_dd):.1f}% drawdown (less than 25% of max drawdown).")

    # Calculate Technical Indicators
    # 1. Simple Moving Averages (SMA)
    data['SMA20'] = data['Close'].rolling(window=20).mean()
    data['SMA50'] = data['Close'].rolling(window=50).mean()

    # 2. Relative Strength Index (RSI)
    delta = data['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    data['RSI'] = 100 - (100 / (1 + rs))

    # 3. Moving Average Convergence Divergence (MACD)
    exp1 = data['Close'].ewm(span=12, adjust=False).mean()
    exp2 = data['Close'].ewm(span=26, adjust=False).mean()
    data['MACD'] = exp1 - exp2
    data['Signal Line'] = data['MACD'].ewm(span=9, adjust=False).mean()
    data['MACD Histogram'] = data['MACD'] - data['Signal Line']

    # Summarize Indicator Values
    print("\nTechnical Indicator Summary:")
    print(f"Current SMA20: {data['SMA20'].iloc[-1]:.2f}")
    print(f"Current SMA50: {data['SMA50'].iloc[-1]:.2f}")
    print(f"Current RSI: {data['RSI'].iloc[-1]:.2f}")
    print(f"Current MACD: {data['MACD'].iloc[-1]:.2f}")
    print(f"Current Signal Line: {data['Signal Line'].iloc[-1]:.2f}")


    # Create subplots for price/SMA, drawdown, RSI, and MACD
    fig, (ax1, ax2, ax3, ax4) = plt.subplots(4, 1, figsize=(12, 16), sharex=True)

    # Chart 1: Stock Price and SMAs
    ax1.plot(data.index, data['Close'], label=f'{symbol} Price', linewidth=2)
    ax1.plot(data.index, data['SMA20'], label='SMA 20', linestyle='--')
    ax1.plot(data.index, data['SMA50'], label='SMA 50', linestyle='--')
    ax1.scatter(worst_day, buy_price, color='red', s=100, label='Buy Point (Max Drawdown)')
    ax1.axhline(y=current_price, color='green', linestyle='--', alpha=0.7, label='Current Price')
    # Add horizontal lines for buy triggers in terms of price
    price_at_25_dd = data[drawdown <= buy_trigger_25].iloc[-1]['Close'] if any(drawdown <= buy_trigger_25) else np.nan
    price_at_50_dd = data[drawdown <= buy_trigger_50].iloc[-1]['Close'] if any(drawdown <= buy_trigger_50) else np.nan

    if not np.isnan(price_at_25_dd):
        ax1.axhline(y=price_at_25_dd, color='purple', linestyle='--', alpha=0.7, label=f'25% Max Drawdown Price ({price_at_25_dd:.2f})')
    if not np.isnan(price_at_50_dd):
        ax1.axhline(y=price_at_50_dd, color='orange', linestyle='--', alpha=0.7, label=f'50% Max Drawdown Price ({price_at_50_dd:.2f})')

    ax1.set_title(f'{symbol}: ${investment} invested at max drawdown → ${current_value:.0f} ({return_pct:+.1f}%)')
    ax1.set_ylabel('Price ($)')
    ax1.legend()
    ax1.grid(True, alpha=0.3)

    # Chart 2: Drawdown
    ax2.fill_between(data.index, drawdown, 0, alpha=0.7, color='red')
    ax2.scatter(worst_day, max_dd, color='darkred', s=100, label=f'Max Drawdown ({abs(max_dd):.1f}%)')
    ax2.axhline(y=-drawdown_pct, color='orange', linestyle='--', label=f'{drawdown_pct}% Threshold')
    ax2.axhline(y=current_dd, color='blue', linestyle='--', alpha=0.7, label=f'Current Drawdown ({abs(current_dd):.1f}%)')
    # Add horizontal lines for buy triggers in terms of drawdown percentage
    ax2.axhline(y=buy_trigger_25, color='purple', linestyle='--', alpha=0.7, label=f'25% Max Drawdown Trigger ({abs(buy_trigger_25):.1f}%)')
    ax2.axhline(y=buy_trigger_50, color='orange', linestyle='--', alpha=0.7, label=f'50% Max Drawdown Trigger ({abs(buy_trigger_50):.1f}%)')

    ax2.set_title('Drawdown from Peak')
    ax2.set_ylabel('Drawdown (%)')
    ax2.legend()
    ax2.grid(True, alpha=0.3)

    # Chart 3: RSI
    ax3.plot(data.index, data['RSI'], label='RSI')
    ax3.axhline(y=30, color='red', linestyle='--', label='Oversold (30)')
    ax3.axhline(y=70, color='green', linestyle='--', label='Overbought (70)')
    ax3.set_title('Relative Strength Index (RSI)')
    ax3.set_ylabel('RSI')
    ax3.legend()
    ax3.grid(True, alpha=0.3)

    # Chart 4: MACD
    ax4.plot(data.index, data['MACD'], label='MACD Line', color='blue')
    ax4.plot(data.index, data['Signal Line'], label='Signal Line', color='orange', linestyle='--')
    ax4.bar(data.index, data['MACD Histogram'], label='MACD Histogram', color='grey', alpha=0.5)
    ax4.set_title('Moving Average Convergence Divergence (MACD)')
    ax4.set_ylabel('MACD')
    ax4.set_xlabel('Date')
    ax4.legend()
    ax4.grid(True, alpha=0.3)


    plt.tight_layout()
    plt.show()

    return {symbol: {'invested': investment, 'current': current_value, 'return': return_pct}}

# Usage examples:
# analyze_drawdown('NFLX', 50, 100)
analyze_drawdown('MSTR', 20, 100)

"""## Summary:

### Data Analysis Key Findings

*   The code successfully calculated and visualized key technical indicators including SMA20, SMA50, RSI, and MACD (MACD line, Signal line, and Histogram).
*   Buy triggers at 25% and 50% of the maximum drawdown were calculated and visualized on both the price chart (as horizontal price lines) and the drawdown chart (as horizontal percentage lines).
*   The analysis for PLTR with a 20% minimum drawdown threshold was performed, showing the maximum and current drawdown percentages, the potential return on investment if bought at the maximum drawdown point, and the current technical indicator values.

### Insights or Next Steps

*   The current technical indicator values could be used in conjunction with the drawdown analysis and buy triggers to inform potential trading decisions for the analyzed symbol (PLTR in the example).
*   Extend the analysis to include backtesting the performance of buying strategies based on the 25% and 50% maximum drawdown triggers, potentially combined with signals from the technical indicators.

"""

import plotly.graph_objects as go
from plotly.subplots import make_subplots

def analyze_drawdown_interactive(symbol, drawdown_pct=50, investment=100):
    """
    Simple drawdown analyzer with interactive plots using Plotly
    symbol: stock ticker (e.g. 'AAPL')
    drawdown_pct: minimum drawdown % (e.g. 50)
    investment: investment amount (e.g. 100)
    """

    # Get stock data
    stock = yf.Ticker(symbol)
    data = stock.history(period="2y")

    # Calculate drawdowns
    peak = data['Close'].expanding().max()
    drawdown = (data['Close'] - peak) / peak * 100

    # Find max drawdown point
    worst_day = drawdown.idxmin()
    max_dd = drawdown[worst_day]

    # Check current drawdown
    current_dd = drawdown.iloc[-1]

    print(f"\n{symbol.upper()} ANALYSIS:")
    print(f"Max drawdown: {abs(max_dd):.1f}%")
    print(f"Current drawdown: {abs(current_dd):.1f}%")

    if abs(max_dd) < drawdown_pct:
        print(f"{symbol}: Only {abs(max_dd):.1f}% max drawdown (need {drawdown_pct}%+)")
        return

    # Calculate investment performance
    buy_price = data['Close'][worst_day]
    current_price = data['Close'].iloc[-1]
    shares = investment / buy_price
    current_value = shares * current_price
    return_pct = (current_value - investment) / investment * 100

    print(f"Buy price (at max drawdown): ${buy_price:.2f}")
    print(f"Current: ${current_price:.2f}")
    print(f"${investment} invested at max drawdown → ${current_value:.0f} ({return_pct:+.1f}%)")

    # Add buy triggers
    buy_trigger_25 = max_dd * 0.25
    buy_trigger_50 = max_dd * 0.5

    if abs(current_dd) >= abs(buy_trigger_50):
        print(f"Trigger: Strong buy signal, currently at {abs(current_dd):.1f}% drawdown (>= 50% of max drawdown).")
    elif abs(current_dd) >= abs(buy_trigger_25):
        print(f"Trigger: Consider buying, currently at {abs(current_dd):.1f}% drawdown (>= 25% of max drawdown).")
    else:
        print(f"Trigger: No strong buy signal at {abs(current_dd):.1f}% drawdown (less than 25% of max drawdown).")

    # Calculate Technical Indicators
    data['SMA20'] = data['Close'].rolling(window=20).mean()
    data['SMA50'] = data['Close'].rolling(window=50).mean()

    delta = data['Close'].diff()
    gain = (delta.where(delta > 0, 0)).rolling(window=14).mean()
    loss = (-delta.where(delta < 0, 0)).rolling(window=14).mean()
    rs = gain / loss
    data['RSI'] = 100 - (100 / (1 + rs))

    exp1 = data['Close'].ewm(span=12, adjust=False).mean()
    exp2 = data['Close'].ewm(span=26, adjust=False).mean()
    data['MACD'] = exp1 - exp2
    data['Signal Line'] = data['MACD'].ewm(span=9, adjust=False).mean()
    data['MACD Histogram'] = data['MACD'] - data['Signal Line']

    print("\nTechnical Indicator Summary:")
    print(f"Current SMA20: {data['SMA20'].iloc[-1]:.2f}")
    print(f"Current SMA50: {data['SMA50'].iloc[-1]:.2f}")
    print(f"Current RSI: {data['RSI'].iloc[-1]:.2f}")
    print(f"Current MACD: {data['MACD'].iloc[-1]:.2f}")
    print(f"Current Signal Line: {data['Signal Line'].iloc[-1]:.2f}")


    # Create subplots
    fig = make_subplots(rows=4, cols=1, shared_xaxes=True,
                        subplot_titles=[f'{symbol}: ${investment} invested at max drawdown → ${current_value:.0f} ({return_pct:+.1f}%)',
                                        'Drawdown from Peak', 'Relative Strength Index (RSI)',
                                        'Moving Average Convergence Divergence (MACD)'],
                        vertical_spacing=0.1)

    # Chart 1: Stock Price and SMAs
    fig.add_trace(go.Scatter(x=data.index, y=data['Close'], mode='lines', name=f'{symbol} Price'), row=1, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['SMA20'], mode='lines', name='SMA 20', line=dict(dash='dash')), row=1, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['SMA50'], mode='lines', name='SMA 50', line=dict(dash='dash')), row=1, col=1)
    fig.add_trace(go.Scatter(x=[worst_day], y=[buy_price], mode='markers', name='Buy Point (Max Drawdown)', marker=dict(color='red', size=10)), row=1, col=1)
    fig.add_hline(y=current_price, line_dash="dash", annotation_text="Current Price", annotation_position="bottom right", row=1, col=1)

    # Add horizontal lines for buy triggers in terms of price
    price_at_25_dd = data[drawdown <= buy_trigger_25].iloc[-1]['Close'] if any(drawdown <= buy_trigger_25) else np.nan
    price_at_50_dd = data[drawdown <= buy_trigger_50].iloc[-1]['Close'] if any(drawdown <= buy_trigger_50) else np.nan

    if not np.isnan(price_at_25_dd):
        fig.add_hline(y=price_at_25_dd, line_dash="dash", annotation_text=f"25% Max Drawdown Price ({price_at_25_dd:.2f})", annotation_position="bottom right", row=1, col=1, line_color="purple")
    if not np.isnan(price_at_50_dd):
        fig.add_hline(y=price_at_50_dd, line_dash="dash", annotation_text=f"50% Max Drawdown Price ({price_at_50_dd:.2f})", annotation_position="bottom right", row=1, col=1, line_color="orange")

    fig.update_yaxes(title_text='Price ($)', row=1, col=1)

    # Chart 2: Drawdown
    fig.add_trace(go.Scatter(x=data.index, y=drawdown, mode='lines', name='Drawdown', fill='tozeroy', fillcolor='red'), row=2, col=1)
    fig.add_trace(go.Scatter(x=[worst_day], y=[max_dd], mode='markers', name=f'Max Drawdown ({abs(max_dd):.1f}%)', marker=dict(color='darkred', size=10)), row=2, col=1)
    fig.add_hline(y=-drawdown_pct, line_dash="dash", annotation_text=f"{drawdown_pct}% Threshold", annotation_position="bottom right", row=2, col=1, line_color="orange")
    fig.add_hline(y=current_dd, line_dash="dash", annotation_text=f"Current Drawdown ({abs(current_dd):.1f}%)", annotation_position="bottom right", row=2, col=1, line_color="blue")
    fig.add_hline(y=buy_trigger_25, line_dash="dash", annotation_text=f"25% Max Drawdown Trigger ({abs(buy_trigger_25):.1f}%)", annotation_position="bottom right", row=2, col=1, line_color="purple")
    fig.add_hline(y=buy_trigger_50, line_dash="dash", annotation_text=f"50% Max Drawdown Trigger ({abs(buy_trigger_50):.1f}%)", annotation_position="bottom right", row=2, col=1, line_color="orange")

    fig.update_yaxes(title_text='Drawdown (%)', row=2, col=1)

    # Chart 3: RSI
    fig.add_trace(go.Scatter(x=data.index, y=data['RSI'], mode='lines', name='RSI'), row=3, col=1)
    fig.add_hline(y=30, line_dash="dash", annotation_text="Oversold (30)", annotation_position="bottom right", row=3, col=1, line_color="red")
    fig.add_hline(y=70, line_dash="dash", annotation_text="Overbought (70)", annotation_position="bottom right", row=3, col=1, line_color="green")
    fig.update_yaxes(title_text='RSI', range=[0, 100], row=3, col=1)

    # Chart 4: MACD
    fig.add_trace(go.Scatter(x=data.index, y=data['MACD'], mode='lines', name='MACD Line', line=dict(color='blue')), row=4, col=1)
    fig.add_trace(go.Scatter(x=data.index, y=data['Signal Line'], mode='lines', name='Signal Line', line=dict(color='orange', dash='dash')), row=4, col=1)
    fig.add_trace(go.Bar(x=data.index, y=data['MACD Histogram'], name='MACD Histogram', marker=dict(color='grey', opacity=0.5)), row=4, col=1)
    fig.update_yaxes(title_text='MACD', row=4, col=1)

    fig.update_layout(height=1200, showlegend=True)
    fig.show()

    return {symbol: {'invested': investment, 'current': current_value, 'return': return_pct}}

# Example usage:
analyze_drawdown_interactive('PLTR', 25, 100)